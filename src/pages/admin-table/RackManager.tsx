
import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import axios from "axios";
import Cookies from "js-cookie";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import { Pencil, Trash2, PlusCircle } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";

interface Zone {
  id: string;
  name: string;
}

interface Rack {
  id: string;
  name: string;
  rackCode?: string; // Optional for fallback
  RackCode?: string; // Fallback for backend serialization
  zone?: Zone;
}

export function RackManager() {
  const [zones, setZones] = useState<Zone[]>([]);
  const [racks, setRacks] = useState<Rack[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedZone, setSelectedZone] = useState<string>("");
  const [formData, setFormData] = useState({ name: "", rackCode: "" });
  const [errors, setErrors] = useState({
    zone: "",
    name: "",
    rackCode: "",
  });
  const [editingRack, setEditingRack] = useState<Rack | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const API_BASE = "http://localhost:8080";
  const token = Cookies.get("authToken");

  // Axios instance with auth token
  const api = axios.create({
    baseURL: API_BASE,
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  // Fetch zones and racks
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [zoneRes, rackRes] = await Promise.all([
          api.get("/api/zones"),
          api.get("/api/racks"),
        ]);
        setZones(zoneRes.data);
        // Map racks to handle RackCode fallback
        setRacks(
          rackRes.data.map((rack: Rack) => ({
            ...rack,
            rackCode: rack.rackCode || rack.RackCode || "",
          }))
        );
      } catch (err) {
        console.error("Error loading data:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const validateForm = () => {
    const newErrors = {
      zone: "",
      name: "",
      rackCode: "",
    };

    if (!selectedZone) {
      newErrors.zone = "Zone is required";
    }
    if (!formData.name.trim()) {
      newErrors.name = "Rack name is required";
    }

    setErrors(newErrors);

    return Object.values(newErrors).every((error) => !error);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    // Clear error on change
    if (errors[name as keyof typeof errors]) {
      setErrors((prev) => ({ ...prev, [name]: "" }));
    }
  };

  const handleZoneChange = (value: string) => {
    setSelectedZone(value);
    if (errors.zone) {
      setErrors((prev) => ({ ...prev, zone: "" }));
    }
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      return; // Prevent submission if validation fails
    }

    try {
      if (editingRack) {
        // Exclude rackCode during update as it's auto-generated
        const { rackCode, ...updateData } = formData;
        await api.put(`/api/racks/${editingRack.id}`, updateData);
      } else {
        // Exclude rackCode during creation as it's generated by the backend
        const { rackCode, ...createData } = formData;
        await api.post(`/api/racks/${selectedZone}`, createData);
      }

      const updated = await api.get("/api/racks");
      setRacks(
        updated.data.map((rack: Rack) => ({
          ...rack,
          rackCode: rack.rackCode || rack.RackCode || "",
        }))
      );

      setFormData({ name: "", rackCode: "" });
      setErrors({ zone: "", name: "", rackCode: "" });
      setEditingRack(null);
      setSelectedZone("");
      setIsDialogOpen(false);
    } catch (err: any) {
      console.error("Error saving rack:", err);
      if (err.response) {
        alert(`Server Error: ${err.response.status} - ${err.response.data}`);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm("Are you sure you want to delete this rack?")) return;

    try {
      await api.delete(`/api/racks/${id}`);
      setRacks(racks.filter((r) => r.id !== id));
    } catch (err) {
      console.error("Error deleting rack:", err);
    }
  };

  const openEditDialog = (rack: Rack) => {
    setEditingRack(rack);
    setFormData({
      name: rack.name,
      rackCode: rack.rackCode || rack.RackCode || "",
    });
    setSelectedZone(rack.zone?.id || "");
    setErrors({ zone: "", name: "", rackCode: "" });
    setIsDialogOpen(true);
  };

  if (loading) {
    return (
      <div className="space-y-4 p-8">
        <Skeleton className="h-8 w-64" />
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          {[...Array(4)].map((_, i) => (
            <Skeleton key={i} className="h-32" />
          ))}
        </div>
      </div>
    );
  }

  return (
    <motion.div
      className="space-y-6 p-8"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Rack Management</h1>
          <p className="text-muted-foreground">Manage racks under each zone</p>
        </div>

        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button className="flex items-center gap-2">
              <PlusCircle className="h-4 w-4" />
              Add Rack
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[400px]">
            <DialogHeader>
              <DialogTitle>
                {editingRack ? "Edit Rack" : "Add Rack"}
              </DialogTitle>
            </DialogHeader>

            <div className="space-y-4 mt-4">
              <div>
                <label className="block text-sm font-medium mb-1">
                  Zone *
                </label>
                <Select
                  value={selectedZone}
                  onValueChange={handleZoneChange}
                >
                  <SelectTrigger
                    className={errors.zone ? "border-red-500" : ""}
                  >
                    <SelectValue placeholder="Select Zone" />
                  </SelectTrigger>
                  <SelectContent>
                    {zones.map((z) => (
                      <SelectItem key={z.id} value={z.id}>
                        {z.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.zone && (
                  <p className="text-red-500 text-xs mt-1">{errors.zone}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  Rack Name *
                </label>
                <Input
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  placeholder="Enter rack name"
                  className={errors.name ? "border-red-500" : ""}
                />
                {errors.name && (
                  <p className="text-red-500 text-xs mt-1">{errors.name}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  Rack Code *
                </label>
                <Input
                  name="rackCode"
                  value={formData.rackCode}
                  onChange={handleChange}
                  placeholder="Rack code (auto-generated)"
                  disabled={true}
                  className={errors.rackCode ? "border-red-500" : ""}
                />
                {errors.rackCode && (
                  <p className="text-red-500 text-xs mt-1">{errors.rackCode}</p>
                )}
              </div>

              <div className="flex justify-end gap-3">
                <Button
                  variant="outline"
                  onClick={() => setIsDialogOpen(false)}
                >
                  Cancel
                </Button>
                <Button onClick={handleSubmit}>
                  {editingRack ? "Update" : "Add"}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Existing Racks</CardTitle>
        </CardHeader>
        <CardContent>
          {racks.length === 0 ? (
            <p className="text-muted-foreground text-sm">No racks found.</p>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full table-auto border-collapse border border-gray-200">
                <thead className="bg-gray-100">
                  <tr>
                    <th className="border border-gray-200 px-4 py-3 text-left font-medium">Code</th>
                    <th className="border border-gray-200 px-4 py-3 text-left font-medium">Name</th>
                    <th className="border border-gray-200 px-4 py-3 text-left font-medium">Zone</th>
                    <th className="border border-gray-200 px-4 py-3 text-center font-medium">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {racks.map((r, index) => (
                    <motion.tr
                      key={r.id}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.05 }}
                      className="hover:bg-gray-50"
                    >
                      <td className="border border-gray-200 px-4 py-3">
                        {r.rackCode || r.RackCode || "—"}
                      </td>
                      <td className="border border-gray-200 px-4 py-3">{r.name}</td>
                      <td className="border border-gray-200 px-4 py-3">{r.zone?.name || "—"}</td>
                      <td className="border border-gray-200 px-4 py-3 text-center space-x-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => openEditDialog(r)}
                        >
                          <Pencil className="h-4 w-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="destructive"
                          onClick={() => handleDelete(r.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </td>
                    </motion.tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
}